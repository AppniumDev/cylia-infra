version: '3.9'

services:
  drone-server:
    container_name: drone-server
    image: drone/drone:2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dronedata:/data
    depends_on:
      - drone-db
    environment:
      - DRONE_DEBUG=true
      - DRONE_LOGS_TRACE=true
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://drone:drone@drone-db:5432/drone?sslmode=disable
      - DRONE_RPC_SECRET=c0feb88a3cd153cc1f7446a8830ee587
      - DRONE_COOKIE_TIMEOUT=720h
      - DRONE_CRON_DISABLED=true
      - DRONE_OPEN=true
      - DRONE_NETWORK=drone_net
      - DRONE_ADMIN=cylia-admin
      - DRONE_USER_CREATE=username:cylia-admin,admin:true
      - DRONE_GIT_ALWAYS_AUTH=true
      - DRONE_SERVER_HOST=drone.cylia.cloud
      - DRONE_SERVER_PROTO=https
      - DRONE_HOST=https://drone.cylia.cloud
      - DRONE_TLS_AUTOCERT=false
      - DRONE_AGENTS_ENABLED=true
      - DRONE_GITHUB=true
      - DRONE_GITHUB_CLIENT_ID=efc9c213a2da4528556d
      - DRONE_GITHUB_CLIENT_SECRET=08c3b11deffef4ef0950abf229fcff40d9d4827c
    networks:
      - caddy_public
      - drone_net
    ports:
      - "8005:80"
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure 

  runner:
    image: drone/drone-runner-docker:latest
    command: agent
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_DEBUG=true
      - DRONE_RPC_HOST=drone-server:8005
      - DRONE_RPC_SERVER=drone-server:8005
      - DRONE_RPC_SECRET=c0feb88a3cd153cc1f7446a8830ee587
      - DRONE_RUNNER_CAPACITY=10
      - DRONE_RUNNER_NAME=drone-cylia-runner
      - DRONE_RUNNER_NETWORKS=drone_net
      - DRONE_RUNNER_NETWORK_OPTS=com.docker.network.drive.mtu:1442
    networks:
      - drone_net
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  drone-db:
    image: postgres:15
    restart: unless-stopped
    networks:
      - drone_net
    environment:
      POSTGRES_USER: drone
      POSTGRES_PASSWORD: drone
      POSTGRES_DB: drone
    
networks:
  drone_net:
    name: drone_net
  caddy_public:
    external: true

volumes:
  dronedata: